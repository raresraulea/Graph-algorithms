#include<iostream>
#include<algorithm>
#include<vector>
#include<fstream>
#define NMAX 100

using namespace std;

ifstream fin("Text.txt");

int N, M;

void citireListe(vector<int> LMA[NMAX + 1])
{
	fin >> N >> M;
	//pp ca muchiile nu se repeta
	for (int i = 0; i < M; i++)
	{
		int x, y;
		fin >> x >> y;
		LMA[x].push_back(y);
		LMA[y].push_back(x);
	}
}
void DFS(bool* viz, int start, vector<int> LMA[NMAX + 1])
{
	viz[start] = true;
	for (auto it = LMA[start].begin(); it != LMA[start].end(); it++)
		if (!viz[*it])
			DFS(viz, *it, LMA);
}
int eEulerian(vector<int> LMA[NMAX + 1])
{
	bool* viz = new bool[N+1];
	fill(viz, viz + N, false);
	
	//caut nod cu grad != 0
	int nod;
	for (nod = 1; nod <= N; nod++)
		if (LMA[nod].size()) break;
	int start = nod; 

	//numarul nodurilor de grad impar
	//daca am mai mult de 2 => nu are cum sa contina nici macar lant eulerian
	//daca am 0 atunci contine ciclu eulerian
	//1 este imposibil deoarece suma gradelor nodurilor in G neor. este para
	int noduriGradImpar = 0;
	for (int i = 1; i <= N; i++)
		if (LMA[i].size() & 1) noduriGradImpar++;
	if (noduriGradImpar > 2) return 0; 
	
	//vizitez nodurile la care se poate ajunge din primul nod de grad nenul
	DFS(viz, start, LMA);

	//verific daca exista noduri de grad nenul care nu au fost vizitate
	//adica daca componenta conexa nu retine toate muchiile
	for (int i = 1; i <= N; i++)
		if (LMA[i].size() && !viz[i])
			return 0;
	if (noduriGradImpar == 0)
		return 1;
	else if (noduriGradImpar == 2)
		return 2;
}
void output(vector<int> LMA[NMAX + 1])
{
	int eulerian = eEulerian(LMA);
	if (!eulerian) cout << "Nu e eulerian!" << endl;
	else if (eulerian == 1) cout << "Eulerian!" << endl;
	else if (eulerian == 2) cout << "Semi-eulerian!" << endl;
}
int main()
{
	vector<int> LMA[NMAX + 1];
	citireListe(LMA);
	output(LMA);

}
/*
TEORIE SI EXPLICATII

1. Graf eulerian: graf care contine un ciclu eulerian (foloseste toate muchiile grafului si start = end)
	-toate nodurile au grad impar
2. Graf semi-eulerian: graf care contine un drum/lant eulerian (foloseste toate muchiile grafului si start != end)
	-nodurile start si end au grad impar, restul au grad par
3. Un Graf eulerian sau semi-eulerian contine toate muchiile intr-o singura componenta conexa
	-poate avea noduri izolate,dar asta inseamna ca dupa o traversare incepand dintr-un nod de grad 
	diferit de 0, toate nodurile cu grad diferit de 0 ar trebui sa fie vizitate
*/