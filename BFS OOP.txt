
#include<iostream> 
#include <list> 

using namespace std;

//clasa si antetul metodelor specifice
class Graph
{ 
    list<int>* adj;
public:
    int V; //nr noduri
    Graph(int V); //constructorul 

    void addEdge(int v, int w); //functie adaugare muchie

    void BFS(int s); //parcurgerea in latime
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V+1]; //alocare dinamica liste de adiacenta 
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);  
    adj[w].push_back(v); // Daca graful este neorientat 
}
bool* visited = new bool[100 + 1];
void Graph::BFS(int s)
{
    
    for (int i = 1; i <= V; i++)
        visited[i] = false;

    list<int> queue;

    visited[s] = true;
    queue.push_back(s);
 
    list<int>::iterator i;

    while (!queue.empty())
    {
        s = queue.front();
        cout << s << " ";
        queue.pop_front();

        for (i = adj[s].begin(); i != adj[s].end(); ++i)
        {
            if (!visited[*i])
            {
                visited[*i] = true;
                queue.push_back(*i);
            }
        }
    }
   
}

int main()
{
    // Create a graph given in the above diagram 
    Graph g(17);
    g.addEdge(1,2);
    g.addEdge(2,3);
    g.addEdge(3,4);
    g.addEdge(4,5);
    g.addEdge(5,7);
    g.addEdge(10,7);
    g.addEdge(7,12);
    g.addEdge(12,10);
    g.addEdge(10,9);
    g.addEdge(9,3);
    g.addEdge(9,13);
    g.addEdge(5,13);
    g.addEdge(4,11);
    g.addEdge(4,8);
    g.addEdge(8,6);
    g.addEdge(4,12);
    g.addEdge(14,15);
    g.addEdge(15,16);
    g.addEdge(14,16);
    g.addEdge(16,17);

    g.BFS(3);

	//cautare noduri nevizitate in cazul unui graf neconex
    for (int i = 1; i <= g.V; i++)
        if (!visited[i])
            g.BFS(i);

    return 0;
}