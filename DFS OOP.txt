
//DFS pentru grafuri conexe si neconexe!

#include<iostream> 
#include<list> 
#include<vector> 
#include<algorithm> 
#include<queue> 

using namespace std;

class Graph
{
public:

    list<int>* adj;

    void DFSUtil(int v, bool* visited);
    int V;
    Graph(int V);   

    void addEdge(int v, int w);

    void DFS(int v);
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V+1];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v’s list. 
    adj[w].push_back(v); // Add w to v’s list. 
}

void Graph::DFSUtil(int v, bool visited[])
{
    visited[v] = true;
    cout << v << " ";

    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
            DFSUtil(*i, visited);
}
bool* visited = new bool[100+ 1];
void Graph::DFS(int v)
{
    for (int i = 1; i <= V; i++)
        visited[i] = false;

    DFSUtil(v, visited);
}

// Driver code 
int main()
{
    Graph g(13);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 4);
    g.addEdge(4, 5);
    g.addEdge(5, 7);
    g.addEdge(10, 7);
    g.addEdge(7, 12);
    g.addEdge(12, 10);
    g.addEdge(10, 9);
    g.addEdge(9, 3);
    g.addEdge(9, 13);
    g.addEdge(5, 13);
    g.addEdge(4, 11);
    g.addEdge(4, 8);
    g.addEdge(8, 6);
    g.addEdge(4, 12);
    /*g.addEdge(14, 15);
    g.addEdge(15, 16);
    g.addEdge(14, 16);
    g.addEdge(16, 17);*/

    g.DFS(12);
    for (int i = 1; i <= g.V; i++)
        if (!visited[i])
            g.DFSUtil(i, visited);
    return 0;
}